# Generated by Django 4.2.7 on 2023-12-13 09:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("phone", models.CharField(max_length=13)),
                (
                    "avatar",
                    models.ImageField(
                        default="users/avatars/default.jpg",
                        upload_to="users/avatars/%Y/%m/%d",
                    ),
                ),
                ("bio", models.TextField(max_length=500, null=True)),
                ("location", models.CharField(max_length=30, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "1. Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FidelityProgram",
            fields=[
                (
                    "name",
                    models.CharField(max_length=30, primary_key=True, serialize=False),
                ),
                (
                    "program_type",
                    models.CharField(
                        choices=[
                            ("CASHBACK", "Cashback"),
                            ("LEVELS", "Levels"),
                            ("POINTS", "Points"),
                            ("MEMBERSHIP", "Membership"),
                            ("GENERIC", "Generic"),
                        ],
                        default="GENERIC",
                        max_length=10,
                    ),
                ),
                ("description", models.TextField(max_length=1000)),
                ("points_coefficient", models.FloatField(default=0.5)),
                ("prize_coefficient", models.FloatField(default=0.5)),
            ],
            options={
                "verbose_name": "fidelityprogram",
                "verbose_name_plural": "3. Fidelity Programs",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("value", models.FloatField(default=0.0)),
                ("points_coefficient", models.FloatField(null=True)),
                ("prize_coefficient", models.FloatField(null=True)),
                ("is_persistent", models.BooleanField(default=False)),
                (
                    "fidelity_program",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="product_fidelity_program",
                        to="server.fidelityprogram",
                    ),
                ),
                (
                    "owning_users",
                    models.ManyToManyField(
                        blank=True, related_name="owners", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "product",
                "verbose_name_plural": "5. Products",
            },
        ),
        migrations.CreateModel(
            name="Shop",
            fields=[
                (
                    "name",
                    models.CharField(max_length=30, primary_key=True, serialize=False),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(max_length=13)),
                ("location", models.CharField(max_length=30, null=True)),
                (
                    "employees",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="shop_owner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "shop",
                "verbose_name_plural": "2. Shops",
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("executed_at", models.DateTimeField(auto_now_add=True)),
                ("total", models.FloatField(default=0.0, editable=False)),
                (
                    "shop",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transaction_shop",
                        to="server.shop",
                    ),
                ),
                ("shopping_cart", models.ManyToManyField(to="server.product")),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transaction_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "transaction",
                "verbose_name_plural": "6. Transactions",
            },
        ),
        migrations.AddField(
            model_name="product",
            name="shop",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="product_shop",
                to="server.shop",
            ),
        ),
        migrations.AddField(
            model_name="fidelityprogram",
            name="shop_list",
            field=models.ManyToManyField(to="server.shop"),
        ),
        migrations.CreateModel(
            name="Catalogue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points", models.FloatField(default=0.0)),
                (
                    "customer",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="customer",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "fidelity_program",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="catalogue_fidelity_program",
                        to="server.fidelityprogram",
                    ),
                ),
            ],
            options={
                "verbose_name": "catalogue",
                "verbose_name_plural": "4. Catalogue",
            },
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.UniqueConstraint(
                fields=("name", "shop"), name="product_key"
            ),
        ),
        migrations.AddConstraint(
            model_name="catalogue",
            constraint=models.UniqueConstraint(
                fields=("customer", "fidelity_program"), name="catalogue_key"
            ),
        ),
    ]
